import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static boolean isBalanced(String expression) {
        if((expression.length() & 1) == 1) return false; // check to see if the string is even, return false if not
        Stack<Character> Brackets = new Stack<>();
        char current;
        for(int i = 0; i < expression.length(); i++){
        	current = expression.charAt(i);
        	// add the brackets to the stack
        	if(current == '[') Brackets.push(']');
        	else if (current == '{')  Brackets.push('}'); 
        	else if (current == '(')  Brackets.push(')');
        	
        	else{
        		if(Brackets.isEmpty() || current != Brackets.pop()){
        			return false;
        		}
        	}
        }
        // the string is balanced
        return Brackets.isEmpty();
    }
  
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            String expression = in.next();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }
    }
}
